package player

import "net/http"

import "goodbuzz/lib"
import "goodbuzz/router/rooms"


func Get(w http.ResponseWriter, r *http.Request) {
    room_id, err := lib.GetIntParam(r, "id")
    if err != nil {
      lib.BadRequest(w, r)
      return
    }
    room := rooms.GetRoom(r.Context(), room_id)

    if room == nil {
      http.NotFound(w, r)
      return
    }

    content := index(room)
    lib.Render(w, r, room.Name(), content)
}

templ index(room *rooms.Room) {
<h1>{room.Name()}</h1>

<!--
Slightly advanced hx-include usage here.
hx-include is inherited by all its children (so everything in <main>), and each of those children
will look for the closest ancestor <input name=token> to include in their requests

For more, see: https://htmx.org/attributes/hx-include/
-->
<main
  class="player"
  hx-ext="sse"
  hx-include="closest [name=token]"
  sse-connect="./player/live"
>
  <!-- Upon connection, the server will send a new token and replace this-->
  <input type="hidden" name="token" value="" sse-swap="token" hx-swap="outerHTML">
  <section>
    <h2>Buzzer</h2>
    <div sse-swap="buzzer" hx-swap="innerHTML">@rooms.LoadingBuzzer()</div>
  </section>

  <section>
    <h2>Players</h2>
    <form hx-put="./player">
      <label>Name: <input type="text" name="name"></label>
      <button>Set</button>
    </form>
    <ul sse-swap="players" hx-swap="innerHTML"></ul>
  </section>

  <section sse-swap="log" hx-swap="beforeend">
    <h2>Log</h2>
  </section>
</main>


<script>
function buzz() {
  const button = document.querySelector('.buzzer')
  fetch(`./buzz`, { method: 'PUT' })

  button.setAttribute('disabled', 'true')
  button.innerText = 'Waiting...'
  button.classList.add('waiting')
}

function setToken(token) {
  const main = document.querySelector('main')
  main.setAttribute('token', token)
}
</script>
}
