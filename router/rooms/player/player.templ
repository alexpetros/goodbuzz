package player

import "net/http"

import "goodbuzz/lib"
import "goodbuzz/lib/room"
import "goodbuzz/router/rooms"
import "fmt"
import "github.com/google/uuid"


func Get(w http.ResponseWriter, r *http.Request) {
    room_id, err := lib.GetIntParam(r, "id")
    if err != nil {
      lib.BadRequest(w, r)
      return
    }

    room, notFoundErr := rooms.GetRoom(r.Context(), room_id)
    if notFoundErr != nil {
      http.NotFound(w, r)
      return
    }

    // The cookie is checked and assigned at
    _, noCookie := r.Cookie("userToken")
    if noCookie != nil {
      cookie := http.Cookie {
        Name:     "userToken",
        Value:    uuid.NewString(),
        Path:     "/",
        HttpOnly: true,
        Secure:   true,
        SameSite: http.SameSiteLaxMode,
      }
      http.SetCookie(w, &cookie)
    }

    content := index(room)
    lib.Render(w, r, room.Name(), content)
}

templ index(room *room.Room) {
<h1>{room.Name()}</h1>

<main
  class="player"
  hx-ext="sse"
  sse-connect="./player/live"
>
  <section class="buzzer">
    <h2>Buzzer</h2>
    <div sse-swap="buzzer" hx-swap="innerHTML">
      <button class="buzzer loading" disabled>Loading...</button>
    </div>
  </section>

  <section class="settings">
    <h2>Settings</h2>
    <form hx-put="./player">
      <label>
        Name: <input type="text" name="name">
      </label>

      <label>
        Team:
        <select name="team">
        for i := 1; i <= 4; i++ {
          <option value={fmt.Sprintf("%d", i)}>Team {fmt.Sprintf("%d", i)}</option>
        }
        </select>
      </label>

      <button>Save</button>
    </form>
  </section>

  <section class="players">
    <h3>Players</h3>
    <div sse-swap="players" hx-swap="innerHTML"></div>
  </section>


  <section class="logs">
    <h2>Log</h2>
    <div
      class="log-container"
      sse-swap="log"
      hx-swap="beforeend"
      hx-on::after-swap="if (this.lastChild) this.scrollTop = this.lastChild.offsetTop"
    ></div>
  </section>

</main>


<script>
function disableBuzzer() {
  this.setAttribute('disabled', 'true')
  this.innerText = 'Waiting...'
  this.classList.add('waiting')
}

</script>
}
