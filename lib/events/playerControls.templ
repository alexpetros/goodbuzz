package events

import (
    "fmt"
    "goodbuzz/lib"
    "goodbuzz/lib/room/users"
)

func PlayerListEvent(players []*users.Player, self *users.Player) string {
  team1, team2 := users.SplitIntoTeams(players)
	return lib.FormatEventComponent("players", PlayerTables(self, team1, team2))
}

func OtherPlayerWonBuzzerEvent(player *users.Player) string {
	return lib.FormatEventComponent("buzzer", OtherPlayerWonBuzzer(player))
}

func LockedOutBuzzerEvent() string {
	return lib.FormatEventComponent("buzzer", LockedOutBuzzer())
}

templ LockedOutBuzzer() {
<button class="buzzer locked" disabled >
  Locked Out
</button>
}

func ProcessingBuzzerEvent() string {
	return lib.FormatEventComponent("buzzer", ProcessingBuzzer())
}

templ ProcessingBuzzer() {
<button class="buzzer waiting" disabled >
  Waiting...
</button>
}

func YouWonBuzzerEvent() string {
	return lib.FormatEventComponent("buzzer", YouWonBuzzer())
}

templ YouWonBuzzer() {
<button class="buzzer you-won" disabled >
  You Won!
</button>
}

templ OtherPlayerWonBuzzer(player *users.Player) {
<button class="buzzer locked" disabled >
  Locked
  <div class="explanation"> Won by {player.Name}</div>
</button>
}

templ PlayerTables(self *users.Player, team1 []*users.Player, team2 []*users.Player) {

<div>
<h3>Team 1</h3>
<table class="team">
  if self.Team == 1 {
  <tr>
    <td class={"you", "player-name", templ.KV("locked", self.IsLocked)}>
      {self.Name} (you)
    </td>
  </tr>
  }
  for _, player := range team1 {
    if player.Token != self.Token {
      <tr>
        <td class={"other", "player-name", templ.KV("locked", player.IsLocked)}>
          {player.Name}
        </td>
      </tr>
    }
  }
</table>
</div>

<div>
<h3>Team 2</h3>
<table class="team">
  if self.Team == 2 {
  <tr>
    <td class={"you", "player-name", templ.KV("locked", self.IsLocked)}>
      {self.Name} (you)
    </td>
  </tr>
  }
  for _, player := range team2 {
    if player.Token != self.Token {
      <tr>
        <td class={"other", "player-name", templ.KV("locked", player.IsLocked)}>
          {player.Name}
        </td>
      </tr>
    }
  }
</table>
</div>
}

func ReadyBuzzerEvent(resetToken string) string {
	return lib.FormatEventComponent("buzzer", ReadyBuzzer(resetToken))
}

templ ReadyBuzzer(resetToken string) {
<button
  class="buzzer"
  hx-put="./buzz"
  hx-on::before-request="disableBuzzer()"
  hx-vals={fmt.Sprintf("\"resetToken\": \"%s\"", resetToken)}
  >Buzz
</button>
}

func OtherTabOpenEvent(userToken string) string {
	return lib.FormatEventComponent("main", OtherTabOpen(userToken))
}

templ OtherTabOpen(userToken string) {
  <p>
  This browser already has a player open to this room in another window or tab.
  </p>
}
